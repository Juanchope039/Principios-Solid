# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- azurePipelines

pr:
- develop
- quality

pool:
  vmImage: ubuntu-latest
  name: Default

steps:
- checkout: none
  clean: true
  persistCredentials: true

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      git clone $(repoGitHub) p
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Cloning GitHub Repo'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      git switch azurePipelines

      echo git remote add github $(repoGitHub) 
      git remote add github $(repoGitHub)

      echo git remote add azure $(repoAzure) 
      git remote add azure $(repoAzure)
    workingDirectory: '$(Build.ArtifactStagingDirectory)/p'
  displayName: 'Settings remote Repo'

- script: |
      cd $(Build.ArtifactStagingDirectory)/p

      echo git pull azure $(branchName)
      git pull azure $(branchName)

      echo git push github $(branchName)
      git push github $(branchName)
  displayName: 'Settings pull and push Repo'



#$(Build.ArtifactStagingDirectory) / $(Build.SourcesDirectory)
#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      dir
#      git clone $(repoGitHub) p
#      cd p 
#      git checkout -b test
#      git pull origin $(branchName)
#    workingDirectory: '$(Build.ArtifactStagingDirectory)'
#  displayName: 'Cloning GitHub Repo'

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      git rebase develop
#      git pull origin $(branchName)
#    workingDirectory: '$(Build.ArtifactStagingDirectory)/p'
#  displayName: 'rebase develop'
#  condition: failed()

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      echo dir 
#      dir
#    workingDirectory: '$(Build.SourcesDirectory)'
#  displayName: 'test'
#  condition: succeededOrFailed()

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      echo git config --global
#      git config --global user.email "$(email)"
#      git config --global user.name "$(name)"

#      echo git remote -v
#      git remote -v

#      echo git remote add github $(repoGitHub) 
#      git remote add github $(repoGitHub)

#      echo git fetch github
#      git fetch github
#    workingDirectory: '$(Build.ArtifactStagingDirectory)/p'
#  displayName: 'Setting GitHub credentials'
#  condition: succeededOrFailed()

#- task: DeleteFiles@1
#  inputs:
#    SourceFolder: '$(Build.SourcesDirectory)/.git/'
#    Contents: '**'
#    RemoveDotFiles: true
#  condition: succeededOrFailed()

#- task: CopyFiles@2
#  inputs:
#    SourceFolder: '$(Build.SourcesDirectory)/'
#    Contents: '**'
#    TargetFolder: '$(Build.ArtifactStagingDirectory)/p'
#  condition: succeededOrFailed()

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      dir
#      
#      echo git add .
#      git add .
#      echo git commit -am "$(comment)"
#      git commit -am "$(comment)"
#      
#      echo git status 
#      git status
#      echo git pull github $(branchName) 
#      git pull github $(branchName)
      
#      echo git status 
#      git status
#      echo git switch -c  $(branchName)
#      git switch -c $(branchName)

#    workingDirectory: '$(Build.ArtifactStagingDirectory)/p'
#  displayName: 'Setting GitHub account'
#  condition: succeededOrFailed()

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      git request-pull -p $(branchName) $(repoAzure)
#    workingDirectory: '$(Build.ArtifactStagingDirectory)/p'
#  displayName: 'Generate Pull Request'
#  condition: succeededOrFailed()